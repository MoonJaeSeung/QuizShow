# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# Workflow의 이름을 정의합니다
name: Java CI with Gradle

# Workflow를 트리거할 이벤트를 지정합니다 (main 브랜치로의 push)
on:
  push:
    branches: [ "main" ]

# Repository 내용에 대한 접근 권한을 지정합니다
permissions:
  contents: read

# Workflow의 작업을 정의합니다
jobs:
  # 빌드 작업을 정의합니다
  build:
    # 작업을 수행할 운영 체제를 설정합니다
    runs-on: ubuntu-latest

    # 작업에서 실행될 단계들을 정의합니다
    steps:

      # 단계: 리포지토리에서 소스 코드를 체크아웃합니다
      - name: checkout
        uses: actions/checkout@v3

      # 단계: JDK 17을 설정합니다
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 단계: application-database.yaml 파일을 생성합니다
      - name: make application.yaml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YAML }}" | base64 -d > application.yaml
        shell: bash

      # 단계: gradlew에 실행 권한을 추가합니다
      - name: Add executable permission to gradlew
        run: chmod +x ./gradlew

      # 단계: Gradle로 프로젝트를 빌드합니다
      - name: Build with Gradle
        run: ./gradlew bootJar

      # 단계: 웹 Docker 이미지를 빌드하고 푸시합니다
      - name: web docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/moon .
          docker push ${{ secrets.DOCKER_REPO }}/moon

      # 단계: SSH를 사용하여 원격 서버에서 명령을 실행합니다 (비밀번호 인증)
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/moon
            sudo docker pull ${{ secrets.DOCKER_REPO }}/moon-nginx
            docker-compose up -d
            docker image prune -f